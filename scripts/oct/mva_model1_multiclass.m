pkg load queueingnS = 5 % number of serversnT = 32 % number of threadsnK = 1 + 1 + nS + nS + 1 % network + LoadBalancer + ReadWorkers + WriteWorker + networknC = 180 % number of clientspW = 5 / 100 % proportion of writesC_GET = 1C_SET = 2ind_get = 3:3+nS-1 % ReadWorker devicesind_set = 3+nS:nK-1 % WriteWorker devices% [U, R, Q, X, G] = qncsmva (N, S, V, [m, [Z]])% N -- Population size (number of requests in the system, N ≥ 0). If N == 0, this function returns U = R = Q = X = 0N = zeros(2, 1)N(2) = round(nC * pW)N(1) = nC - N(2)% S -- S(k) is the mean service time at center k (S(k) ≥ 0).S = zeros(2, nK)S(C_GET, 1) = 2.826752 / 1000 % ms -> sS(C_GET, 2) = 0.003863378 / 1000 % ms -> sS(C_GET, ind_get) = 3.048588 / 1000 % ms -> sS(C_GET, nK) = S(C_GET, 1)S(C_SET, 1) = 2.858229 / 1000 % ms -> sS(C_SET, 2) = 0.003403551 / 1000 % ms -> sS(C_SET, ind_set) = 3.122988 / 1000 % ms -> sS(C_SET, nK) = S(C_SET, 1)S(C_GET, ind_set) = S(C_SET, ind_set) % these should not matterS(C_SET, ind_get) = S(C_GET, ind_get) % these should not matter% V -- V(k) is the average number of visits to service center k (V(k) ≥ 0).V = zeros(2, nK);V(C_GET, 1:2) = 1;V(C_GET, ind_get) = 1 / nS;V(C_GET, nK) = 1;V(C_SET, 1:2) = 1;V(C_SET, ind_set) = 1 / nS;V(C_SET, nK) = 1;% m -- m(k) is the number of servers at center k (if m is a scalar, all centers have that number of servers).% If m(k) < 1, center k is a delay center (IS); otherwise it is a regular queueing center (FCFS, LCFS-PR or PS) with m(k) servers.% Default is m(k) = 1 for all k (each service center has a single server).m = ones(nK, 1);m(1) = 0; # delay centerm(2) = 1;m(ind_get) = nT;m(ind_set) = 1;m(nK) = 0 # delay center% Z -- External delay for customers (Z ≥ 0). Default is 0.Z = zeros(2, 1);% ---- Results ----[U, R, Q, X] = qncmmva (N, S, V, m, Z);% U -- If k is a FCFS, LCFS-PR or PS node (m(k) ≥ 1), then U(k) is the utilization of center k, 0 ≤ U(k) ≤ 1. If k is an IS node (m(k) < 1), then U(k) is the traffic intensity defined as X(k)*S(k). In this case the value of U(k) may be greater than one.% R -- R(k) is the response time at center k. The Residence Time at center k is R(k) * V(k). The system response time Rsys can be computed either as Rsys = N/Xsys - Z or as Rsys = dot(R,V)% Q -- Q(k) is the average number of requests at center k. The number of requests in the system can be computed either as sum(Q), or using the formula N-Xsys*Z.% X -- X(k) is the throughput of center k. The system throughput Xsys can be computed as Xsys = X(1) / V(1)Qr = round(Q);printf("Number of jobs:\n\t%d between client and LoadBalancer\n\t%d in LoadBalancer \n\t%d total in all MiddlewareComponents\n\t%d between MiddlewareComponent and client\n", Qr(1), Qr(2), sum(Qr(3:nK-1)), Qr(nK))